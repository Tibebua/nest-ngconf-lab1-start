{
	"gsr-nest-missions-service-getMissions": {
		"prefix": "gsr-nest-missions-service-getMissions",
		"body": [
			"getMissions() {",
			"  return this.missionsRepository.getList();",
			"}"
		],
		"description": "gsr-nest-missions-service-getMissions"
	},
	"gsr-nest-missions-controller-getMissions": {
		"prefix": "gsr-nest-missions-controller-getMissions",
		"body": [
			"@Get()",
			"async getMissions() {",
			"  return this.missionsService.getMissions();",
			"}"
		],
		"description": "gsr-nest-missions-controller-getMissions"
	},
	"gsr-nest-data-interceptor-intercept": {
		"prefix": "gsr-nest-data-interceptor-intercept",
		"body": [
			"intercept(context: ExecutionContext, next: CallHandler): Observable<any> {",
			"  return next.handle().pipe(",
			"    map(data => {",
			"      return {",
			"        data: classToPlain(data)",
			"      };",
			"    })",
			"  );",
			"}"
		],
		"description": "gsr-nest-data-interceptor-intercept"
	},
	"gsr-ng-missions-service-getmissions": {
		"prefix": "gsr-ng-missions-service-getmissions",
		"body": [
			"getMissions() {",
			"  return this.httpClient",
			"    .get<{data: Mission[]}>('http://localhost:3000/missions')",
			"    .pipe(map(response => response.data));",
			"}"
		],
		"description": "gsr-ng-missions-service-getmissions"
	},
	"gsr-ng-home-page-oninit": {
		"prefix": "gsr-ng-home-page-oninit",
		"body": [
			"ngOnInit() {",
			"  this.missions = this.missionsService.getMissions();",
			"}"
		],
		"description": "gsr-ng-home-page-oninit"
	},
	"gsr-nest-missions-service-getmission": {
		"prefix": "gsr-nest-missions-service-getmission",
		"body": [
			"getMission(id: number) {",
			"  return this.missionsRepository.get(id);",
			"}"
		],
		"description": "gsr-nest-missions-service-getmission"
	},
	"gsr-nest-missions-controller-getmission": {
		"prefix": "gsr-nest-missions-controller-getmission",
		"body": [
			"@Get(':id')",
			"async getMission(@Param('id') id: number) {",
			"  return this.missionsService.getMission(id);",
			"}"
		],
		"description": "gsr-nest-missions-controller-getmission"
	},
	"gsr-nest-data-pipe-transform": {
		"prefix": "gsr-nest-data-pipe-transform",
		"body": [
			"transform(value: any, metadata: ArgumentMetadata) {",
			"  const { metatype } = metadata;",
			"  if (!metatype) {",
			"    return value;",
			"  }",
			"  const convertedValue = plainToClass(metatype, value);",
			"  return convertedValue;",
			"}"
		],
		"description": "gsr-nest-data-pipe-transform"
	},
	"gsr-ng-missions-service-getmissionbyid": {
		"prefix": "gsr-ng-missions-service-getmissionbyid",
		"body": [
			"",
			"getMissionById(id: number) {",
			"  return this.httpClient",
			"    .get<{data: Mission}>(`http://localhost:3000/missions/${id}`)",
			"    .pipe(map(response => response.data));",
			"}"
		],
		"description": "gsr-ng-missions-service-getmissionbyid"
	},
	"gsr-ng-missionform-component-ngoninit": {
		"prefix": "gsr-ng-missionform-component-ngoninit",
		"body": [
			"ngOnInit() {",
			"  const id = this.navParams.data.id;",
			"  if (id) {",
			"    this.mission$ = this.missionsService.getMissionById(id);",
			"  } else {",
			"    this.mission$ = of({ active: false } as any);",
			"  }",
			"}"
		],
		"description": "gsr-ng-missionform-component-ngoninit"
	},
	"gsr-ng-home-page-openmission": {
		"prefix": "gsr-ng-home-page-openmission",
		"body": [
			"async openMission(mission: Mission) {",
			"  const modal = await this.modalController.create({",
			"    component: MissionFormComponent,",
			"    componentProps: { id: mission.id }",
			"  });",
			"  await modal.present();",
			"  const { data = {} } = await modal.onDidDismiss();",
			"  if (data.refreshMissions) {",
			"    this.missions = this.missionsService.getMissions();",
			"  }",
			"}"
		],
		"description": "gsr-ng-home-page-openmission"
	},
	"gsr-nest-missions-service-createupdatedelete": {
		"prefix": "gsr-nest-missions-service-createupdatedelete",
		"body": [
			"createMission(mission: MissionEntity) {",
			"  return this.missionsRepository.create(mission);",
			"}",
			"",
			"async updateMission(id: number, mission: MissionEntity) {",
			"  const current = await this.getMission(id);",
			"  if (!current) {",
			"    return null;",
			"  }",
			"  mission.createdAt = current.createdAt;",
			"  mission.createdBy = current.createdBy;",
			"  return this.missionsRepository.update(id, mission);",
			"}",
			"",
			"deleteMission(id: number) {",
			"  return this.missionsRepository.delete(id);",
			"}"
		],
		"description": "gsr-nest-missions-service-createupdatedelete"
	},
	"gsr-nest-missions-controller-createupdatedelete": {
		"prefix": "gsr-nest-missions-controller-createupdatedelete",
		"body": [
			"@Post()",
			"async createMission(@Body() mission: MissionEntity) {",
			"  return this.missionsService.createMission(mission);",
			"}",
			"",
			"@Put(':id')",
			"async updateMission(@Param('id') id: number, @Body() mission: MissionEntity) {",
			"  return this.missionsService.updateMission(id, mission);",
			"}",
			"",
			"@Delete(':id')",
			"async deleteMission(@Param('id') id: number) {",
			"  return this.missionsService.deleteMission(id);",
			"}"
		],
		"description": "gsr-nest-missions-controller-createupdatedelete"
	},
	"gsr-ng-missions-service-createupdatedelete": {
		"prefix": "gsr-ng-missions-service-createupdatedelete",
		"body": [
			"createMission(mission: Mission) {",
			"    return this.httpClient",
			"      .post<Mission>(`http://localhost:3000/missions`, mission)",
			"      .toPromise()",
			"      .catch(response => {",
			"        throw response.error;",
			"      });",
			"  }",
			"",
			"  updateMission(mission: Mission) {",
			"    return this.httpClient",
			"      .put<Mission>(`http://localhost:3000/missions/${mission.id}`, mission)",
			"      .toPromise()",
			"      .catch(response => {",
			"        throw response.error;",
			"      });",
			"  }",
			"",
			"  deleteMission(mission: Mission) {",
			"    return this.httpClient",
			"      .delete<Mission>(`http://localhost:3000/missions/${mission.id}`)",
			"      .toPromise()",
			"      .catch(response => {",
			"        throw response.error;",
			"      });",
			"  }"
		],
		"description": "gsr-ng-missions-service-createupdatedelete"
	},
	"gsr-ng-mission-form-component-submit": {
		"prefix": "gsr-ng-mission-form-component-submit",
		"body": [
			"async submit(mission: Mission) {",
			"  try {",
			"    if (mission.id) {",
			"      await this.missionsService.updateMission(mission);",
			"    } else {",
			"      await this.missionsService.createMission(mission);",
			"    }",
			"    this.modalCtrl.dismiss({",
			"      refreshMissions: true",
			"    });",
			"  } catch (error) {",
			"    const alert = await this.alertController.create({",
			"      header: 'API Error',",
			"      subHeader: error.error,",
			"      message: error.message,",
			"      buttons: ['OK']",
			"    });",
			"    await alert.present();",
			"  }",
			"}"
		],
		"description": "gsr-ng-mission-form-component-submit"
	},
	"gsr-ng-home-page-newmission": {
		"prefix": "gsr-ng-home-page-newmission",
		"body": [
			"async newMission() {",
			"  const modal = await this.modalController.create({",
			"    component: MissionFormComponent",
			"  });",
			"  await modal.present();",
			"  const { data = {} } = await modal.onDidDismiss();",
			"  if (data.refreshMissions) {",
			"    this.missions = this.missionsService.getMissions();",
			"  }",
			"}"
		],
		"description": "gsr-ng-home-page-newmission"
	},
	"gsr-ng-mission-form-component-delete": {
		"prefix": "gsr-ng-mission-form-component-delete",
		"body": [
			"async delete(mission: Mission) {",
			"  const alert = await this.alertController.create({",
			"    header: 'Delete Mission?',",
			"    message: 'Are you sure you want to delete this mission?',",
			"    buttons: [",
			"      {",
			"        text: 'No',",
			"        role: 'cancel',",
			"        cssClass: 'secondary'",
			"      },",
			"      {",
			"        text: 'Yes',",
			"        handler: async () => {",
			"          try {",
			"            await this.missionsService.deleteMission(mission);",
			"            this.modalCtrl.dismiss({",
			"              refreshMissions: true",
			"            });",
			"          } catch (error) {",
			"            const deleteAlert = await this.alertController.create({",
			"              header: 'API Error',",
			"              subHeader: error.error,",
			"              message: error.message,",
			"              buttons: ['OK']",
			"            });",
			"            await deleteAlert.present();",
			"          }",
			"        }",
			"      }",
			"    ]",
			"  });",
			"  await alert.present();",
			"}"
		],
		"description": "gsr-ng-mission-form-component-delete"
	},
	"gsr-ng-missions-service-handleerror": {
		"prefix": "gsr-ng-missions-service-handleerror",
		"body": [
			"handleError(response: any) {",
			"  const { error } = response;",
			"  if (error.statusCode === 400) {",
			"    let message = '';",
			"    error.message.forEach((msg: any) => {",
			"      const keys = Object.keys(msg.constraints);",
			"      keys.forEach(k => {",
			"        message += msg.constraints[k] + '<br />';",
			"      });",
			"    });",
			"    throw { message };",
			"  }",
			"  throw error;",
			"}"
		],
		"description": "gsr-ng-missions-service-handleerror"
	},
	"gsr-nest-auth-guard-canactivate": {
		"prefix": "gsr-nest-auth-guard-canactivate",
		"body": [
			"canActivate(context: ExecutionContext): boolean {",
			"  const request = context.switchToHttp().getRequest();",
			"  let token: string;",
			"  let user: User;",
			"",
			"  if (",
			"    request.headers.authorization &&",
			"    request.headers.authorization.startsWith('Bearer ')",
			"  ) {",
			"    token = request.headers.authorization.split(' ')[1];",
			"    user = this.userService.getUser(token.replace('-token', ''));",
			"    if (!user) {",
			"      return false;",
			"    }",
			"    request.user = user;",
			"  }",
			"",
			"  const requiredRoles =",
			"    this.reflector.get<string[]>('roles', context.getHandler()) || [];",
			"",
			"  if (requiredRoles.length === 0) {",
			"    return true;",
			"  } else if (!user) {",
			"    return false;",
			"  }",
			"",
			"  const hasRole = user.roles.some(role => requiredRoles.indexOf(role) > -1);",
			"  return hasRole;",
			"}"
		],
		"description": "gsr-nest-auth-guard-canactivate"
	},
	"gsr-ng-auth-interceptor-intercept": {
		"prefix": "gsr-ng-auth-interceptor-intercept",
		"body": [
			"intercept(",
			"  request: HttpRequest<any>,",
			"  next: HttpHandler",
			"): Observable<HttpEvent<any>> {",
			"  const authToken = window.localStorage.getItem('auth-token');",
			"",
			"  if (!authToken) {",
			"    return next.handle(request);",
			"  }",
			"",
			"  const newRequest = request.clone({",
			"    setHeaders: {",
			"      Authorization: `Bearer ${authToken}`",
			"    }",
			"  });",
			"",
			"  return next.handle(newRequest);",
			"}"
		],
		"description": "gsr-ng-auth-interceptor-intercept"
	},
	"gsr-nest-getuser-decorator-getuser": {
		"prefix": "gsr-nest-getuser-decorator-getuser",
		"body": [
			"export const GetUser = createParamDecorator((data, req) => {",
			"  return req.user;",
			"});"
		],
		"description": "gsr-nest-getuser-decorator-getuser"
	}
}